!ifdef DEBUG {
    !warn "bytes wasted: ", IRQ-*
}

!align 255, 0
IRQ !zone {
;-------------------------------------------------------------------------------
;   LINE_0
;-------------------------------------------------------------------------------

    ; irq event                             ;  7
    ; last instruction                      ;  1 (min)
    +save_regs out                          ; 12
    +assert LINE_0, VIC_RASTER              ;  9
                                            ;--> 29
    ; ack interrupt
    inc VIC_IRQ_STATUS                      ;  6

    inc VIC_RASTER                          ;  6
    +set16 .irq_line_0_plus_1, VECTOR_IRQ   ; 12
                                            ;--> 24

    ; save stack state
    tsx                                     ;  2
    ; begin raster stabilization
    cli                                     ;  2
                                            ;--> 4

    ; somewhere here the next interrupt will hit
    +wait_even 63 - 29 - 24 - 4

;-------------------------------------------------------------------------------
;   LINE_0 + 1
;-------------------------------------------------------------------------------
.irq_line_0_plus_1
    ; irq event                             ;  7
    ; last instruction                      ;1-2 (because of the nop field above)
    ; restore stack state
    txs                                     ;  2
                                            ;--> 10-11

    ; calculate the number of nops to skip in VSP
    lda #SCR_COLS-1                         ;  2
    sec                                     ;  2
HARD_X = *+1
    sbc #0                                  ;  2
    lsr                                     ;  2
    sta .self_modifying_branch__nops + 1    ;  4
                                            ;--> 12

    ; introduce an extra cycle in VSP if carry is set
    bcs .set_bcc                            ;2-3
.set_bcs
    ldx #BCS_OPCODE                         ;  2
    bne +   ; always true                   ;  3
.set_bcc
    ldx #BCC_OPCODE                         ;  2
    nop     ; make this path as long        ;  2
+
    stx .self_modifying_branch__lsb         ;  4
                                            ;--> 11

    ; set up soft scroll
    lda #CONTROL_X                          ;  2
    clc                                     ;  2
SOFT_X = *+1
    adc #0                                  ;  2
    sta VIC_CONTROL_X                       ;  4
                                            ;--> 10

    ; switch to VIC bank 0
    ;inc CIA2_DATA_PORT_A                    ;  6
    ;inc $ff00

    +wait 63-11-12-11-10-6

    ; wobble check
    lda #LINE_0 + 2                         ;  2
    cmp VIC_RASTER                          ;  4
                                            ;--> 6
    +bne                                    ;3-2
    ; -> the raster interrupt is stable now with 3 cycles off

;-------------------------------------------------------------------------------
;   LINE_0 + 2
;-------------------------------------------------------------------------------

    ; wobble check from above               ;-->  3

    ; make FIRST_BADLINE a bad line
    lda #CONTROL_Y_INVALID                  ;  2
    sta VIC_CONTROL_Y                       ;  4
                                            ;-->  6

    lda #SCR_ROWS                           ;  2
    sec                                     ;  2
HARD_Y = *+1
    sbc #0                                  ;  2
    tax                                     ;  2
                                            ;-->  8

    ; pre-compute VIC_CONTROL_Y value for soft-scrolling
    lda #7 + (SCR_ROWS+1) % 8               ;  2
    sec                                     ;  2
SOFT_Y = *+1
    sbc #0                                  ;  2

    and #%00000111                          ;  2
    ora #CONTROL_Y_INVALID                  ;  2
    ; spill pre-computed value
    pha                                     ;  3
                                            ;--> 13

    ;wait till just before LINE_O + 3 == FIRST_BADLINE
    +wait_loop 63 - 3 - 6 - 8 - 13 - 20 - 4

;-------------------------------------------------------------------------------
;   FLD & line crunch
;-------------------------------------------------------------------------------

!macro inc_vic_control_y {
        lda VIC_CONTROL_Y                   ;  4
        clc                                 ;  2
        adc #1                              ;  2
        and #%00000111                      ;  2
        adc #CONTROL_Y_INVALID              ;  2
        sta VIC_CONTROL_Y                   ;  4
}                                           ;--> 16


.fld_loop
    cpx #0                                  ;  2
    beq +                                   ;  2 (in this loop)
    +inc_vic_control_y                      ; 16
                                            ;--> 20
    +wait_loop 63 - 20 - 2 - 3
;+wait_loop 63 - 20 - 2 - 3 - 6
;inc VIC_BORDER

    dex                                     ;  2
    jmp .fld_loop                           ;  3
+

    ldx HARD_Y

.crunch_loop
    cpx #0                                  ;  2
    beq +                                   ;  2 (in this loop)
    +inc_vic_control_y                      ; 16
                                            ;--> 20
    +wait_loop 63 - 20 - 2 - 3
;+wait_loop 63 - 20 - 2 - 3 - 6
;dec VIC_BORDER

    dex                                     ;  2
    jmp .crunch_loop                        ;  3
+

    ; ^^^ these are always 25 raster lines ^^^

;-------------------------------------------------------------------------------
;   VSP
;-------------------------------------------------------------------------------
    ; make VSP line not a bad line
    inc VIC_CONTROL_Y                       ;6
    +wait 5                                 ;5
    sec                                     ;2
    ; introduce an extra cycle if 39 - HARD_X is odd
.self_modifying_branch__lsb
    +bcs                                    ;2-3

.self_modifying_branch__nops
    ; always true and jump into nop field
    +bcs                                    ;  3
    +wait 38                                ;0-38

!if (>IRQ) != (>*) {
    !error "critical irq code in different pages"
}
    ; generate bad line
    dec VIC_CONTROL_Y                       ;6

    ; 6 + 5 + 2 + 2/3 + 3 + 0/38 + 6 = 24/63

;-------------------------------------------------------------------------------
; prepare soft scroll
;-------------------------------------------------------------------------------

    ; reload pre-computed VIC_CONTROL_Y value
    pla
    sta VIC_CONTROL_Y
    and #CONTROL_Y_MASK
    pha

;stx VIC_BORDER    ;4

;-------------------------------------------------------------------------------
; use wait time to setup first sprite strip
;-------------------------------------------------------------------------------

    !ifdef DEBUG {
        ldx #1
        stx VIC_BORDER
;        inc VIC_BORDER
    }
    !for .i, 0, 3 {
        !set .r = 3-.i
        ; index
        ldy SPR_I + .i

        ; y-coord
        lda SPR_Y, y
        sta VIC_SPR_0_Y + 4*.r
        sta VIC_SPR_0_Y + 4*.r + 2

        ; x-coord
        lda SPR_X, y
        asl
        sta VIC_SPR_0_X + 4*.r
        sta VIC_SPR_0_X + 4*.r + 2

        ; x-coord MSB
        !if .i != 0 {
            txa
        }
        php
        rol
        plp
        rol
        tax

        ; colors
        lda SPR_A, y
        sta VIC_SPR_0_COLOR + .r*2 + 1
        lda SPR_B, y
        sta VIC_SPR_0_COLOR + .r*2

        ; set sprite pointers
        lda SPR_F, y
        tay
        sty SPR_PTR + .r*2 + 1
        iny
        sty SPR_PTR + .r*2
    }

    stx VIC_SPR_X_MSB
    !ifdef DEBUG {
        ldx #2
        stx VIC_BORDER
;        dec VIC_BORDER
    }

;-------------------------------------------------------------------------------
; issue soft scroll
;-------------------------------------------------------------------------------

    pla
    ; wait till end of AGSP region
    ldy #FIRST_BADLINE+SCR_ROWS+8
-
    cpy VIC_RASTER
    bne -

    ;stx CIA2_DATA_PORT_A
    ;stx $ff00
    sta VIC_CONTROL_Y

;-------------------------------------------------------------------------------
; sprite multiplexing
;-------------------------------------------------------------------------------

    !ifdef DEBUG {
        ldx #3
        stx VIC_BORDER
;        inc VIC_BORDER
    }
    ldx #4
    stx SPR_COUNTER

    ldy #1
    sty PLAY

rotate
    !for .i, 0, 3 {
        !set r = 3-.i
        !zone {
            lda VIC_SPR_0_Y + r*4
            clc
            adc #21 + 2     ; carry clear - so add one extra for borrow
            sbc VIC_RASTER
            +bult .display_sprite

            ; don't issue next interrupt too early - let's have 3 raster lines safety
            cmp #3
            +buge +
            lda #3
+
            tay

            clc
            adc VIC_RASTER
            sta VIC_RASTER

            +set16 .next_irq, VECTOR_IRQ

            cpy #24 ; play routine needs about 21 lines, add 3 for safety
            +bult .exit
            ldy PLAY
            beq .exit
            dec PLAY

            txa
            pha
            jsr PLAY_SONG
            pla
            tax

.exit
            jmp out_x

.next_irq
            +save_regs out
;            !ifdef DEBUG {
;                inc VIC_BORDER
;            }
            ldx SPR_COUNTER
            !ifdef DEBUG {
                stx VIC_BORDER
            }

.display_sprite
            ldy SPR_I, x

            ; y-coord
            lda SPR_Y, y

            ; are we too late?
            cmp VIC_RASTER
            +bule .skip

            sta VIC_SPR_0_Y + r*4
            sta VIC_SPR_0_Y + r*4 + 2

            ; x-coord
            lda SPR_X, y
            asl
            sta VIC_SPR_0_X + r*4
            sta VIC_SPR_0_X + r*4 + 2

            ; x-msb
            bcc .clear_x_msb
.set_x_msb
            lda # %00000011 << 2*r
            ora VIC_SPR_X_MSB
            bne +    ; always true
.clear_x_msb
            lda # <!(%00000011 << 2*r)
            and VIC_SPR_X_MSB
+
            sta VIC_SPR_X_MSB

            ; colors
            lda SPR_A, y
            sta VIC_SPR_0_COLOR + r*2 + 1
            lda SPR_B, y
            sta VIC_SPR_0_COLOR + r*2

            ; sprite frames
            lda SPR_F, y
            sta SPR_PTR + r*2 + 1
            tay
            iny
            sty SPR_PTR + r*2
.skip
            inx
            !if r = 0 {
                cpx #SPRITES
                beq last_irq
                jmp rotate
            }
        }
    }

;-------------------------------------------------------------------------------
; we are finishing the last irq this frame
;-------------------------------------------------------------------------------

;!ifndef DEVELOP {
!source "krill/loader/build/loadersymbols-c64.inc"
;}

;!convtab pet {
;tile_map
;    !tx "map"
;    !by 0
;}

last_irq
    jsr JOYSTICK

lda R_MAP_POS_HI
cmp #96
bne .clear_loaded

lda LOADED
bne .copy_tiles
;inc VIC_BORDER

lda #$71
sta VIC_CONTROL_Y

ldx #<tile_map
ldy #>tile_map
jsr loadcompd

lda #1
sta LOADED
jmp .play_song

.clear_loaded
lda #0
sta LOADED

.copy_tiles
    jsr COPY_TILES
.play_song
    ldy PLAY
    beq +
    jsr PLAY_SONG
+

;-------------------------------------------------------------------------------
; sort sprites
;-------------------------------------------------------------------------------

    !ifdef DEBUG {
        ldx #2
        stx VIC_BORDER
;        inc VIC_BORDER
    }
    !for .i, 0, SPRITES-2 {
        ldy SPR_I + .i + 1
        !if .i % 2 = 0 {
            !set .back_0 = *
        } else {
            !set .back_1 = *
        }
        ldx SPR_I + .i
        lda SPR_Y, y            ; A: r-elem
        cmp SPR_Y, x            ; M: l-elem
        ; swap if A < M
        ; skip if A >= M
        +buge +
        stx SPR_I + .i + 1
        sty SPR_I + .i
        !if .i = 0 {
            ; do nothing
        } else {
            !if .i % 2 = 0 {
                +bult .back_1   ; always true
            } else {
                +bult .back_0   ; always true
            }
        }
+
    }
    !ifdef DEBUG {
        ldx #1
        stx VIC_BORDER
;        dec VIC_BORDER
    }

    +set_raster_line_8 LINE_0
    +set16 IRQ, VECTOR_IRQ

out_x
    stx SPR_COUNTER
    !ifdef DEBUG {
        ldx #0
        stx VIC_BORDER
;        dec VIC_BORDER
    }
out
    +ack_restore_rti
EMPTY_INTERRUPT = *-1
}
