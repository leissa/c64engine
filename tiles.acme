!macro copy_tile_char .char {
    ldy #0
    lda TILE_CLR+(.char*TILES), x
    sta (CLR_POS_LO_T), y

    lda TILE_SCR+(.char*TILES), x
    sta (SCR_POS_LO_T), y

    lda #ALL_RAM
    sta RAM_ROM_SELECTION

    !for .row, 0, 7 {
        lda TILE_PIX+(.char*8*TILES)+(.row*TILES), x
        sta (PIX_POS_LO_T), y
        !if .row != 7 {
            iny
        }
    }

    lda #ALL_RAM_WITH_IO
    sta RAM_ROM_SELECTION

    rts
}

copy_tile_char0 !zone { +copy_tile_char 0 }
copy_tile_char1 !zone { +copy_tile_char 1 }
copy_tile_char2 !zone { +copy_tile_char 2 }
copy_tile_char3 !zone { +copy_tile_char 3 }
copy_tile_char4 !zone { +copy_tile_char 4 }
copy_tile_char5 !zone { +copy_tile_char 5 }

!macro iterate_source_pointers .cols, .map_pos {
!if .cols = 1 {
    !set .tile_char = C_TILE_COL
} else {
    !set .tile_char = R_TILE_ROW
}

!if .cols = 1 or TILE_ROWS != 2 {
    lda .tile_char
    adc #1
    !if .cols = 1 {
        cmp #TILE_COLS
    } else {
        cmp #TILE_ROWS
    }
    sta .tile_char
    bcc +
    clc
    lda #0
    sta .tile_char
}

!if .cols = 1 {
    inc .map_pos + 1
} else {
    !if TILE_ROWS = 2 {
        lda .tile_char
        adc #1
        and #1
        sta .tile_char
        bne +
    }

    inc .map_pos + 2
}
+
}

!macro iterate_destination_pointers .cols {
    ; pixel pointer
    lda PIX_POS_LO_T
    adc #(8*.cols % 256) ; + 64
    sta PIX_POS_LO_T
!if .cols = 1 {
    bcc+
}
    lda PIX_POS_HI_T
    adc #(8*.cols / 256) ; + 256
    and #%11011111 ; modulo 8192 (but keep upper bits)
    sta PIX_POS_HI_T ; next pixel position to start from
+
    ; color pointers
    lda SCR_POS_LO_T
    adc #.cols
    sta SCR_POS_LO_T ; next screen position to start from
    sta CLR_POS_LO_T
    bcc +

    lda CLR_POS_HI_T
    adc #0
    and #%11111011 ; modulo 1024 (but keep upper bits)
    sta CLR_POS_HI_T

    adc #%00001000
    sta SCR_POS_HI_T
+
}

; depends on TILE_COLS and TILE_ROWS
;select_and_copy_tile_char !zone {
;    !for .char, 0, 5 {
;        !if .char != 5 {
;            !if .char != 0 {
;                cmp #.char
;            }
;            bne +
;        }
;        !if .char = 0 { jsr copy_tile_char0 }
;        !if .char = 1 { jsr copy_tile_char1 }
;        !if .char = 2 { jsr copy_tile_char2 }
;        !if .char = 3 { jsr copy_tile_char3 }
;        !if .char = 4 { jsr copy_tile_char4 }
;        !if .char = 5 { jsr copy_tile_char5 }
;        rts
;+
;    }
;}

!macro init_pointers .cols {
!if .cols = 1 {
    !set .tile_col = C_TILE_COL
    !set .tile_row = C_TILE_ROW
    !set .map_pos_lo = C_MAP_POS_LO
    !set .map_pos_hi = C_MAP_POS_HI
    !set .pix_pos_lo = C_PIX_POS_LO
    !set .pix_pos_hi = C_PIX_POS_HI
    !set .scr_pos_lo = C_SCR_POS_LO
    !set .scr_pos_hi = C_SCR_POS_HI
    !set .map_pos_lo_t = C_MAP_POS_LO_T
    !set .map_pos_hi_t = C_MAP_POS_HI_T
    !set .pix_pos_lo_t = C_PIX_POS_LO_T
    !set .pix_pos_hi_t = C_PIX_POS_HI_T
    !set .scr_pos_lo_t = C_SCR_POS_LO_T
    !set .scr_pos_hi_t = C_SCR_POS_HI_T
    !set .clr_pos_hi_t = C_CLR_POS_HI_T
} else {
    !set .tile_col = R_TILE_COL
    !set .tile_row = R_TILE_ROW
    !set .map_pos_lo = R_MAP_POS_LO
    !set .map_pos_hi = R_MAP_POS_HI
    !set .pix_pos_lo = R_PIX_POS_LO
    !set .pix_pos_hi = R_PIX_POS_HI
    !set .scr_pos_lo = R_SCR_POS_LO
    !set .scr_pos_hi = R_SCR_POS_HI
    !set .map_pos_lo_t = R_MAP_POS_LO_T
    !set .map_pos_hi_t = R_MAP_POS_HI_T
    !set .pix_pos_lo_t = R_PIX_POS_LO_T
    !set .pix_pos_hi_t = R_PIX_POS_HI_T
    !set .scr_pos_lo_t = R_SCR_POS_LO_T
    !set .scr_pos_hi_t = R_SCR_POS_HI_T
    !set .clr_pos_hi_t = R_CLR_POS_HI_T
}
    lda TILE_COL
    sta .tile_col

    lda TILE_ROW
    sta .tile_row

    lda .map_pos_lo
    sta .map_pos_lo_t

    clc

    lda .map_pos_hi
    adc #>TILE_MAP
    clc
    sta .map_pos_hi_t

    lda .pix_pos_hi
    adc #>HIRES
    sta .pix_pos_hi_t

    lda .pix_pos_lo
    sta .pix_pos_lo_t

    lda .scr_pos_hi
    adc #>SCREEN
    sta .scr_pos_hi_t

    lda .scr_pos_hi
    adc #>COLOR_RAM
    sta .clr_pos_hi_t

    lda .scr_pos_lo
    sta .scr_pos_lo_t
}

!macro copy_tile_chars .cols, .count {
!if .cols = 1 {
    !set .tile_col_t = C_TILE_COL
    !set .tile_row_t = C_TILE_ROW
    !set .map_pos_lo_t = C_MAP_POS_LO_T
    !set .map_pos_hi_t = C_MAP_POS_HI_T
    !set .pix_pos_lo_t = C_PIX_POS_LO_T
    !set .pix_pos_hi_t = C_PIX_POS_HI_T
    !set .scr_pos_lo_t = C_SCR_POS_LO_T
    !set .scr_pos_hi_t = C_SCR_POS_HI_T
    !set .clr_pos_hi_t = C_CLR_POS_HI_T
} else {
    !set .tile_col_t = R_TILE_COL
    !set .tile_row_t = R_TILE_ROW
    !set .map_pos_lo_t = R_MAP_POS_LO_T
    !set .map_pos_hi_t = R_MAP_POS_HI_T
    !set .pix_pos_lo_t = R_PIX_POS_LO_T
    !set .pix_pos_hi_t = R_PIX_POS_HI_T
    !set .scr_pos_lo_t = R_SCR_POS_LO_T
    !set .scr_pos_hi_t = R_SCR_POS_HI_T
    !set .clr_pos_hi_t = R_CLR_POS_HI_T
}
    lda .map_pos_lo_t
    sta .next_tile_char + 1

    lda .map_pos_hi_t
    sta .next_tile_char + 2

    lda .scr_pos_lo_t
    sta SCR_POS_LO_T
    sta CLR_POS_LO_T

    lda .scr_pos_hi_t
    sta SCR_POS_HI_T

    lda .clr_pos_hi_t
    sta CLR_POS_HI_T

    lda .pix_pos_lo_t
    sta PIX_POS_LO_T

    lda .pix_pos_hi_t
    sta PIX_POS_HI_T

    lda #.count
    sta ITERATIONS

    clc
.next_tile_char
    ldx TILE_MAP

    ; pixel pointer
    lda .tile_row_t
    beq +
    lda #TILE_COLS ; a = TILE_COLS * tile_row (TILE_ROWS = 2)
+
    adc .tile_col_t

;    jsr select_and_copy_tile_char

    !for .char, 0, 5 {
        !if .char != 5 {
            !if .char != 0 {
                cmp #.char
            }
            bne +
        }
        !if .char = 0 { jsr copy_tile_char0 }
        !if .char = 1 { jsr copy_tile_char1 }
        !if .char = 2 { jsr copy_tile_char2 }
        !if .char = 3 { jsr copy_tile_char3 }
        !if .char = 4 { jsr copy_tile_char4 }
        !if .char = 5 { jsr copy_tile_char5 }
        !if .char != 5 { bne .iterate_pointers }
+
    }

.iterate_pointers
    clc
    +iterate_source_pointers .cols, .next_tile_char
    +iterate_destination_pointers .cols
    dec ITERATIONS
    bne .next_tile_char

.exit
    lda .next_tile_char + 1
    sta .map_pos_lo_t

    lda .next_tile_char + 2
    sta .map_pos_hi_t

    lda SCR_POS_LO_T
    sta .scr_pos_lo_t

    lda SCR_POS_HI_T
    sta .scr_pos_hi_t

    lda CLR_POS_HI_T
    sta .clr_pos_hi_t

    lda PIX_POS_LO_T
    sta .pix_pos_lo_t

    lda PIX_POS_HI_T
    sta .pix_pos_hi_t
}

copy_col_tiles1 !zone {
    +init_pointers 1
    +copy_tile_chars 1, SCROLL_COLS / COPY_COL_FRAMES
    rts
}

copy_col_tiles2 !zone {
    +copy_tile_chars 1, SCROLL_COLS / COPY_COL_FRAMES + ((SCROLL_COLS % COPY_COL_FRAMES) != 0)
    rts
}

copy_row_tiles1 !zone {
    +init_pointers SCR_COLS
    +copy_tile_chars SCR_COLS, SCROLL_ROWS / COPY_ROW_FRAMES
    rts
}

copy_row_tiles2 !zone {
    +copy_tile_chars SCR_COLS, SCROLL_ROWS / COPY_ROW_FRAMES + ((SCROLL_ROWS % COPY_ROW_FRAMES) != 0)
    rts
}

COPY_TILES !zone {
    ldy C_COPY
    bne .check_copy_col_tiles1
    jsr COPY_ROW_TILES
    rts
.check_copy_col_tiles1
    dey
    sty C_COPY
    cpy #COPY_COL_FRAMES-1
    bne .check_copy_col_tiles2
    jsr copy_col_tiles1
    rts
.check_copy_col_tiles2
    jsr copy_col_tiles2
    rts
}

COPY_ROW_TILES !zone {
    ldy R_COPY
    bne .check_copy_row_tiles1
    rts
.check_copy_row_tiles1
    dey
    sty R_COPY
    cpy #COPY_ROW_FRAMES-1
    bne .check_copy_row_tiles2
    jsr copy_row_tiles1
    rts
.check_copy_row_tiles2
    jsr copy_row_tiles2
    rts
}
