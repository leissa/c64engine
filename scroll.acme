SCROLL_COLS = SCR_COLS
SCROLL_ROWS = SCR_ROWS-2

INC_HARD_Y !zone {
    inc HARD_Y
    lda #SCR_ROWS+1
    cmp HARD_Y
    bne .return

    lda #0
    sta HARD_Y

    lda HARD_X
    sec
    sbc #16
    sta HARD_X
    clc
    adc #SCR_COLS
    cmp #SCR_COLS
    bcs .return    ; jmp if A < 40
    sta HARD_X
    inc HARD_Y

.return
    rts
}

DEC_HARD_Y !zone {
    dec HARD_Y
    bpl .return

    lda #SCR_ROWS
    sta HARD_Y

    lda HARD_X
    clc
    adc #16
    sta HARD_X
    sec
    sbc #SCR_COLS
    bmi .return
    sta HARD_X
    dec HARD_Y

.return
    rts
}

!macro wrap_inc .mem, .inc, .and, .l {
    lda .mem
    clc
    adc #.inc
    and #.and-1 ; assumes 2^x = .and
    sta .mem
    bne .l
}

!macro wrap_dec .mem, .dec, .and, .l {
    lda .mem
    sec
    sbc #.dec
    and #.and-1 ; assumes 2^x = .and
    sta .mem
    bcs .l
}

!macro wrap_add .lo, .hi, .add, .and {
    clc

    lda .lo
    adc #(.add % 256)
    sta .lo
!if .add < 256 {
    bcc +
}
    lda .hi
    adc #(.add / 256)
    and #.and-1 ; assumes 2^x = .and
    sta .hi
+
}

!macro wrap_sub .lo, .hi, .sub, .and {
    sec

    lda .lo
    sbc #(.sub % 256)
    sta .lo
!if .sub < 256 {
    bcs +
}
    lda .hi
    sbc #(.sub / 256)
    and #.and-1 ; assumes 2^x = .and
    sta .hi
+
}

SCROLL_U !zone {
;    lda VIC_SPR_0_Y
;    cmp #73
;    beq+
;    !for .i, 0, 7 {
;        ;dec VIC_SPR_0_Y + .i*2
;    }
;+

    +wrap_dec SOFT_Y, SCROLL_SPEED, 8, .check_copy_tiles
    jsr DEC_HARD_Y
    rts

.check_copy_tiles
;   lda SOFT_Y
    !if SCROLL_SPEED = 2 { cmp #2 } else { cmp #2 } ;#3 } ;#0 }
    beq .prepare_copy_tiles
    rts
.prepare_copy_tiles
    lda #COPY_COL_FRAMES
    sta C_COPY

    lda TILE_ROW
    sec
    sbc #1
    bcs +
    adc #TILE_ROWS
    dec C_MAP_POS_HI
    dec R_MAP_POS_HI
+
    sta TILE_ROW
    +wrap_sub C_SCR_POS_LO, C_SCR_POS_HI, SCROLL_COLS, 4
    +wrap_sub R_SCR_POS_LO, R_SCR_POS_HI, SCROLL_COLS, 4
    +wrap_sub C_PIX_POS_LO, C_PIX_POS_HI, 8*SCROLL_COLS, 8*4
    +wrap_sub R_PIX_POS_LO, R_PIX_POS_HI, 8*SCROLL_COLS, 8*4

    lda SCROLL_U_D
    beq +

    sec
    lda C_MAP_POS_HI
    sbc #(SCROLL_ROWS-1)/TILE_ROWS
    sta C_MAP_POS_HI
    +wrap_sub C_SCR_POS_LO, C_SCR_POS_HI, (SCROLL_ROWS-1)*SCROLL_COLS, 4
    +wrap_sub C_PIX_POS_LO, C_PIX_POS_HI, 8*(SCROLL_ROWS-1)*SCROLL_COLS, 8*4

    lda #0
    sta SCROLL_U_D
+
    rts
}

SCROLL_D !zone {
;    !for .i, 0, 7 {
;        ;inc VIC_SPR_0_Y + .i*2
;    }

    +wrap_inc SOFT_Y, SCROLL_SPEED, 8, .check_copy_tiles
    jsr INC_HARD_Y
    rts

.check_copy_tiles
;   lda SOFT_Y
    cmp #3;4;1
    beq .prepare_copy_tiles
    rts
.prepare_copy_tiles
    lda #COPY_COL_FRAMES
    sta C_COPY

    lda TILE_ROW
    clc
    adc #1
    cmp #TILE_ROWS
    bcc +
    sbc #TILE_ROWS
    inc C_MAP_POS_HI
    inc R_MAP_POS_HI
+
    sta TILE_ROW
    +wrap_add C_SCR_POS_LO, C_SCR_POS_HI, SCROLL_COLS, 4
    +wrap_add R_SCR_POS_LO, R_SCR_POS_HI, SCROLL_COLS, 4
    +wrap_add C_PIX_POS_LO, C_PIX_POS_HI, 8*SCROLL_COLS, 8*4
    +wrap_add R_PIX_POS_LO, R_PIX_POS_HI, 8*SCROLL_COLS, 8*4

    lda SCROLL_U_D
    bne +

    clc
    lda C_MAP_POS_HI
    adc #(SCROLL_ROWS-1)/TILE_ROWS
    sta C_MAP_POS_HI
    +wrap_add C_SCR_POS_LO, C_SCR_POS_HI, (SCROLL_ROWS-1)*SCROLL_COLS, 4
    +wrap_add C_PIX_POS_LO, C_PIX_POS_HI, 8*(SCROLL_ROWS-1)*SCROLL_COLS, 8*4

    lda #1
    sta SCROLL_U_D
+
    rts
}

SCROLL_L !zone {
;    !for .i, 0, 7 {
;        ;dec VIC_SPR_0_X + .i*2
;    }

    +wrap_inc SOFT_X, SCROLL_SPEED, 8, .check_copy_tiles
    inc HARD_X
    lda #SCR_COLS
    cmp HARD_X
    bne +

    lda #0
    sta HARD_X
    jsr DEC_HARD_Y
+
    rts

.check_copy_tiles
;   lda SOFT_X
    cmp #3;4;2
    beq .prepare_copy_tiles
    rts
.prepare_copy_tiles
    lda #COPY_ROW_FRAMES
    sta R_COPY

    lda TILE_COL
    sec
    sbc #1
    bcs +
    adc #TILE_COLS
    dec C_MAP_POS_LO
    dec R_MAP_POS_LO
+
    sta TILE_COL
    +wrap_sub C_SCR_POS_LO, C_SCR_POS_HI, 1, 4
    +wrap_sub R_SCR_POS_LO, R_SCR_POS_HI, 1, 4
    +wrap_sub C_PIX_POS_LO, C_PIX_POS_HI, 8, 8*4
    +wrap_sub R_PIX_POS_LO, R_PIX_POS_HI, 8, 8*4

    lda SCROLL_L_R
    beq +

    sec
    lda R_MAP_POS_LO
    sbc #(SCROLL_COLS-1)/TILE_COLS
    sta R_MAP_POS_LO
    +wrap_sub R_SCR_POS_LO, R_SCR_POS_HI, SCROLL_COLS-1, 4
    +wrap_sub R_PIX_POS_LO, R_PIX_POS_HI, 8*(SCROLL_COLS-1), 8*4

    lda #0
    sta SCROLL_L_R
+
    rts
}

SCROLL_R !zone {
;    !for .i, 0, 7 {
;        ;inc VIC_SPR_0_X + .i*2
;    }

    +wrap_dec SOFT_X, SCROLL_SPEED, 8, .check_copy_tiles
    dec HARD_X
    bpl +

    lda #SCR_COLS-1
    sta HARD_X
    jsr INC_HARD_Y
+
    rts

.check_copy_tiles
;   lda SOFT_X
    !if SCROLL_SPEED = 2 { cmp #2 } else { cmp #2 } ; 3 } ;#1 }
    beq .prepare_copy_tiles
    rts
.prepare_copy_tiles
    lda #COPY_ROW_FRAMES
    sta R_COPY

    lda TILE_COL
    clc
    adc #1
    cmp #TILE_COLS
    bcc +
    sbc #TILE_COLS
    inc C_MAP_POS_LO
    inc R_MAP_POS_LO
+
    sta TILE_COL
    +wrap_add C_SCR_POS_LO, C_SCR_POS_HI, 1, 4
    +wrap_add R_SCR_POS_LO, R_SCR_POS_HI, 1, 4
    +wrap_add C_PIX_POS_LO, C_PIX_POS_HI, 8, 8*4
    +wrap_add R_PIX_POS_LO, R_PIX_POS_HI, 8, 8*4

    lda SCROLL_L_R
    bne +

    clc
    lda R_MAP_POS_LO
    adc #(SCROLL_COLS-1)/TILE_COLS
    sta R_MAP_POS_LO
    +wrap_add R_SCR_POS_LO, R_SCR_POS_HI, SCROLL_COLS-1, 4
    +wrap_add R_PIX_POS_LO, R_PIX_POS_HI, 8*(SCROLL_COLS-1), 8*4

    lda #1
    sta SCROLL_L_R
+
    rts
}
