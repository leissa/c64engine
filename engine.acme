!ifdef DEVELOP {
!to "engine.prg", cbm   ; output program
}
!sl "labels.l"          ; create label file for vice
!convtab scr            ; for conversion to c64 screen codes

!source "lib/mem.acme"
!source "lib/vic.acme"
!source "lib/cia.acme"
!source "lib/std.acme"
!ifndef DEVELOP {
!source "krill/loader/build/loadersymbols-c64.inc"
}

!ifdef DEBUG {
    CONTROL_X           = %00011000 ; 40 cols
    CONTROL_Y_INVALID   = %00111000 ; 25 rows
} else {
    CONTROL_X           = %00010000 ; multi color
    CONTROL_Y_INVALID   = %01110000 ; invalid mode
}

CONTROL_Y_MASK      = %10111111 ; bitmap mode
LINE_0              = FIRST_BADLINE-3
SCROLL_SPEED        = 2 ; supported are 1 or 2
TILE_COLS           = 3
TILE_ROWS           = 2
SCR_COLS            = 40
SCR_ROWS            = 25
MAP_WIDTH           = 256 ; assumed by the code, no other widths supported atm.
MAP_HEIGHT          = 96
SPRITES             = 24 ; at least 4
SPRITES_TOP         = $3c; 60; somewhere between 55 and 60
TILES               = 185 ; TODO: calculate this with pixels.bin size / 8 / TILE_COLS / TILE_ROWS

*=SPR_DATA

_spr_y
;    !by $fa, $f8, $f6, $f4, $da, $d8, $d6, $d4, $ba, $b8, $b6, $b4, $9a, $98, $96, $94, $7a, $78, $76, $74, $5a, $58, $56, $54
    !by SPRITES_TOP, SPRITES_TOP, SPRITES_TOP, SPRITES_TOP
    !by $74, $76, $78, $7a, $94, $96, $98, $9a, $b4, $b6, $b8, $ba, $d0, $d2, $d4, $d6, $f0, $f0, $f0, $f0
;    !by $54, $56, $58, $5a, $74, $76, $78, $7a, $94, $96, $98, $9a, $b4, $b6, $b8, $ba, $d4, $d6, $d8, $da, $f4, $f6, $f8, $fa
SPR_X
    !by $10, $20, $30, $40, $50, $60, $70, $80, $10, $20, $30, $40, $50, $60, $70, $80, $10, $20, $30, $40, $50, $60, $70, $80
SPR_A
    !by $0a, $0a, $02, $03, $04, $05, $06, $07, $08, $09, $0a, $0a, $0a, $0d, $0e, $0f, $00, $01, $02, $03, $04, $05, $06, $07
SPR_B
    !by $00, $00, $0d, $0c, $0b, $0a, $09, $08, $07, $06, $05, $00, $00, $02, $01, $00, $0f, $0e, $0d, $0c, $0b, $0a, $09, $08
SPR_F
    !by SPR_FR_BASE+$00, SPR_FR_BASE+$02, SPR_FR_BASE+$04, SPR_FR_BASE+$06
    !by SPR_FR_BASE+$08, SPR_FR_BASE+$0a, SPR_FR_BASE+$0c, SPR_FR_BASE+$0e
    !by SPR_FR_BASE+$10, SPR_FR_BASE+$12, SPR_FR_BASE+$14, SPR_FR_BASE+$00
    !by SPR_FR_BASE+$02, SPR_FR_BASE+$1a, SPR_FR_BASE+$1c, SPR_FR_BASE+$1e
    !by SPR_FR_BASE+$04, SPR_FR_BASE+$04, SPR_FR_BASE+$04, SPR_FR_BASE+$06
    !by SPR_FR_BASE+$08, SPR_FR_BASE+$0a, SPR_FR_BASE+$0c, SPR_FR_BASE+$0e

+create_basic_starter CODE_START
*=CODE_START

!zone {
;-------------------------------------------------------------------------------
;   install 1541 code (credits for the disk loader go to Krill)
;-------------------------------------------------------------------------------

!ifndef DEVELOP {
    jsr install
    bcc +
    ldx #0
-
    sta $d020
    stx $d020
    jmp -
+
}

;-------------------------------------------------------------------------------
;   disable all basic, kernal and irq crap
;-------------------------------------------------------------------------------

    ; set empty interrupt routine
    +set16 EMPTY_INTERRUPT, VECTOR_NMI
    +set16 EMPTY_INTERRUPT, VECTOR_IRQ

    ; disable IRQs
    sei

    ; disable ROMs
    +set ALL_RAM_WITH_IO, RAM_ROM_SELECTION
    +disable_timer_interrupts

    lda #0
    ; no IRQs
    sta VIC_IRQ_CONTROL
    ; set timer A to 0
    sta CIA2_TIMER_A_LO
    sta CIA2_TIMER_A_HI

    ; trigger timer A interrupt
    +set %10000001, CIA2_INTERRUPT_CONTROL
    +set %00000001, CIA2_CONTROL_TIMER_A

    ; reset stack
    ldx #$ff
    txs

    ; just clear this flag and never ever touch this again
    cld

    ; -> NMI is disabled as soon as EMPTY_INTERRUPT has been triggered since we will never ever ack NMI again
    ; -> zero page completely free on this spot except for the special regs $00 and $01

;-------------------------------------------------------------------------------
;   copy loader code to work area $0200 ~ $0400
;-------------------------------------------------------------------------------

!ifndef DEVELOP {
    ; copy 2 pages
    ldy #2
    ldx #0
.copy_loop
    lda DISK_LOADER_SRC, x
    sta DISK_LOADER, x
    dex
    bne .copy_loop
    inc .copy_loop + 2
    inc .copy_loop + 5
    dey
    bne .copy_loop
}

;-------------------------------------------------------------------------------
;   setup VIC
;-------------------------------------------------------------------------------

    ; select VIC area: bank 3
    lda #0; upper 6 bits must always be 0
    sta CIA2_DATA_PORT_A

    ; select screen bank 8, hires-bank 0
    lda #%10000000
    sta VIC_ADDR_SELECT

    +set %10101010, VIC_SPR_MULTI
    +set BROWN, VIC_SPR_COLOR_01
    +set GREY,  VIC_SPR_COLOR_11
    +set $ff, VIC_SPR_ENABLE

;-------------------------------------------------------------------------------
;   setup test stuff
;-------------------------------------------------------------------------------

    !if SPRITES > 0 {
        !for .i, 0, SPRITES-1 {
            lda _spr_y + .i
            sta SPR_Y + .i
            lda #.i
            sta SPR_I + .i
        }
    }

    !if SPRITES < 4 {
        ldx #$ff-(2^(8-(2*SPRITES))-1)
    } else {
        ldx #$ff
    }
    stx VIC_SPR_ENABLE

    ;---can be done at compile time?---
ldx #CONTROL_Y_INVALID
stx CTRL_Y_INVALID

    ldx #0
    stx C_COPY
    stx R_COPY
    stx SCROLL_U_D
    stx SCROLL_L_R

    ldx #COLOR_BLACK
    stx VIC_BACKGROUND_0
    stx VIC_BORDER

    ldx #0
    stx TILE_COL
    ldx #1
    stx TILE_ROW

;    ldx #<TILE_MAP
;    ldx #$80
    ldx #$f3
    stx C_MAP_POS_LO
    stx R_MAP_POS_LO
;    ldx #>TILE_MAP
;    ldx #$40
    ldx #$42
    stx C_MAP_POS_HI
    stx R_MAP_POS_HI

    ldx #0
    stx C_SCR_POS_LO
    stx C_SCR_POS_HI
    stx R_SCR_POS_LO
    stx R_SCR_POS_HI
    stx C_PIX_POS_LO
    stx C_PIX_POS_HI
    stx R_PIX_POS_LO
    stx R_PIX_POS_HI
    ;----------------------------------

    +clear_screen 0, SCREEN

;-------------------------------------------------------------------------------
;   setup sound
;-------------------------------------------------------------------------------

    lda #0       ; starting from 0
    jsr INIT_SONG

;-------------------------------------------------------------------------------
;   load map data
;-------------------------------------------------------------------------------

!ifndef DEVELOP {
    jmp .load

.load_error
    ldx #0
-
    sta $d020
    stx $d020
    jmp -

!convtab pet {
tile_map
    !tx "map"
    !by 0
tile_clr
    !tx "colors"
    !by 0
tile_scr
    !tx "screen"
    !by 0
tile_pix
    !tx "pixels"
    !by 0
}

.load
    ldx #<tile_map
    ldy #>tile_map
    jsr loadcompd
    bcs .load_error

    ldx #<tile_clr
    ldy #>tile_clr
    jsr loadcompd
    bcs .load_error

    ldx #<tile_scr
    ldy #>tile_scr
    jsr loadcompd
    bcs .load_error

    ldx #<tile_pix
    ldy #>tile_pix
    jsr loadcompd
    bcs .load_error
}

;-------------------------------------------------------------------------------
;   setup raster irq
;-------------------------------------------------------------------------------

    ; ack all interrupts which might have happend
    +set $ff, VIC_IRQ_STATUS

    +set16 IRQ, VECTOR_IRQ
    +set_raster_line_9 LINE_0
    +set 1, VIC_IRQ_CONTROL
    ; enable IRQs
    cli
-
    ; some 7 cycle garbage instructions
    lda ($f0), y
    lda ($f0, x)
    lda ($f0), y
    lda ($f0, x)
    lda ($f0), y
    sec     ; 2
    +bcs    ; 3
    jmp -
}

!source "scroll.acme"
!source "joystick.acme"
!source "raster.acme"
!source "tiles.acme"

!ifdef DEBUG {
    !warn "code ends on: ", *-1
}

*=SONG_DATA
!bin "snd/transylvanian.bin"

!ifndef DEVELOP {
*=DISK_LOADER_SRC
!bin "krill/loader/build/loader-c64.prg",,2

*=DISK_INSTALLER
!bin "krill/loader/build/install-c64.prg",,2
}

!ifdef DEVELOP {
*=TILE_MAP
!bin "map.bin"

*=TILE_CLR
!bin "colors.bin"

*=TILE_SCR
!bin "screen.bin"

*=TILE_PIX
!bin "pixels.bin"
}

*=SPR_FR
!bin "spr/hero.raw", 64*4

!for .i, 0, 15 {
    +sprite_line %.............#.#.#.#.#.#
    +sprite_line %.............#.#.#.#.#.#
    +sprite_line %.............#.#.#.#.#.#
    +sprite_line %.............#.#.#.#.#.#
    +sprite_line %.............#.#.#.#.#.#
    +sprite_line %.............#.#.#.#.#.#
    +sprite_line %.............#.#.#.#.#.#
    +sprite_line %.............#.#.#.#.#.#
    +sprite_line %.............#.#.#.#.#.#
    ;+sprite_line %.............#.#.#.#.#.#
    !by .i, .i, .i
    !by .i, .i, .i
    !by .i, .i, .i
    ;+sprite_line %#.#.#.#.#.#.############
    +sprite_line %#.#.#.#.#.#.############
    +sprite_line %#.#.#.#.#.#.############
    +sprite_line %#.#.#.#.#.#.############
    +sprite_line %#.#.#.#.#.#.############
    +sprite_line %#.#.#.#.#.#.############
    +sprite_line %#.#.#.#.#.#.############
    +sprite_line %#.#.#.#.#.#.############
    +sprite_line %#.#.#.#.#.#.############
    +sprite_line %#.#.#.#.#.#.############
    !by $00; padding
    +sprite_line %########################
    +sprite_line %#.#..................#.#
    +sprite_line %#..#................#..#
    +sprite_line %#...#..............#...#
    +sprite_line %#....#............#....#
    +sprite_line %#.....#..........#.....#
    +sprite_line %#......#........#......#
    +sprite_line %#.......#......#.......#
    +sprite_line %#........#....#........#
    +sprite_line %#.........#..#.........#
    +sprite_line %#..........##..........#
    +sprite_line %#.........#..#.........#
    +sprite_line %#........#....#........#
    +sprite_line %#.......#......#.......#
    +sprite_line %#......#........#......#
    +sprite_line %#.....#..........#.....#
    +sprite_line %#....#............#....#
    +sprite_line %#...#..............#...#
    +sprite_line %#..#................#..#
    +sprite_line %#.#..................#.#
    +sprite_line %########################
    !by $00; padding
}

!ifdef DEBUG {
    !warn "frames end on: ", *-1
}
